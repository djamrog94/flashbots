// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package flashbots

import (
	"encoding/json"
	"math/big"
)

var _ = (*userStatsResponseMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (u UserStatsResponse) MarshalJSON() ([]byte, error) {
	type UserStatsResponse struct {
		IsHighPriority       bool       `json:"is_high_priority"`
		AllTimeMinerPayments *strBigint `json:"all_time_miner_payments"`
		AllTimeGasSimulated  *strBigint `json:"all_time_gas_simulated"`
		Last7dMinerPayments  *strBigint `json:"last_7d_miner_payments"`
		Last7dGasSimulated   *strBigint `json:"last_7d_gas_simulated"`
		Last1dMinerPayments  *strBigint `json:"last_1d_miner_payments"`
		Last1dGasSimulated   *strBigint `json:"last_1d_gas_simulated"`
	}
	var enc UserStatsResponse
	enc.IsHighPriority = u.IsHighPriority
	enc.AllTimeMinerPayments = (*strBigint)(u.AllTimeMinerPayments)
	enc.AllTimeGasSimulated = (*strBigint)(u.AllTimeGasSimulated)
	enc.Last7dMinerPayments = (*strBigint)(u.Last7dMinerPayments)
	enc.Last7dGasSimulated = (*strBigint)(u.Last7dGasSimulated)
	enc.Last1dMinerPayments = (*strBigint)(u.Last1dMinerPayments)
	enc.Last1dGasSimulated = (*strBigint)(u.Last1dGasSimulated)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (u *UserStatsResponse) UnmarshalJSON(input []byte) error {
	type UserStatsResponse struct {
		IsHighPriority       *bool      `json:"is_high_priority"`
		AllTimeMinerPayments *strBigint `json:"all_time_miner_payments"`
		AllTimeGasSimulated  *strBigint `json:"all_time_gas_simulated"`
		Last7dMinerPayments  *strBigint `json:"last_7d_miner_payments"`
		Last7dGasSimulated   *strBigint `json:"last_7d_gas_simulated"`
		Last1dMinerPayments  *strBigint `json:"last_1d_miner_payments"`
		Last1dGasSimulated   *strBigint `json:"last_1d_gas_simulated"`
	}
	var dec UserStatsResponse
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.IsHighPriority != nil {
		u.IsHighPriority = *dec.IsHighPriority
	}
	if dec.AllTimeMinerPayments != nil {
		u.AllTimeMinerPayments = (*big.Int)(dec.AllTimeMinerPayments)
	}
	if dec.AllTimeGasSimulated != nil {
		u.AllTimeGasSimulated = (*big.Int)(dec.AllTimeGasSimulated)
	}
	if dec.Last7dMinerPayments != nil {
		u.Last7dMinerPayments = (*big.Int)(dec.Last7dMinerPayments)
	}
	if dec.Last7dGasSimulated != nil {
		u.Last7dGasSimulated = (*big.Int)(dec.Last7dGasSimulated)
	}
	if dec.Last1dMinerPayments != nil {
		u.Last1dMinerPayments = (*big.Int)(dec.Last1dMinerPayments)
	}
	if dec.Last1dGasSimulated != nil {
		u.Last1dGasSimulated = (*big.Int)(dec.Last1dGasSimulated)
	}
	return nil
}
