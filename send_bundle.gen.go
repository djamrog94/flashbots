// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package flashbots

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core/types"
)

var _ = (*sendBundleMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (s SendBundleParam) MarshalJSON() ([]byte, error) {
	type SendBundleParam struct {
		Transactions      types.Transactions `json:"-"`
		RawTransactions   []hexutil.Bytes    `json:"txs"         gencodec:"required"`
		BlockNumber       *hexutil.Big       `json:"blockNumber" gencodec:"required"`
		MinTimestamp      *hexutil.Big       `json:"minTimestamp,omitempty"`
		MaxTimestamp      *hexutil.Big       `json:"maxTimestamp,omitempty"`
		RevertingTxHashes []common.Hash      `json:"revertingTxHashes,omitempty"`
	}
	var enc SendBundleParam
	enc.Transactions = s.Transactions
	if s.RawTransactions != nil {
		enc.RawTransactions = make([]hexutil.Bytes, len(s.RawTransactions))
		for k, v := range s.RawTransactions {
			enc.RawTransactions[k] = v
		}
	}
	enc.BlockNumber = (*hexutil.Big)(s.BlockNumber)
	enc.MinTimestamp = (*hexutil.Big)(s.MinTimestamp)
	enc.MaxTimestamp = (*hexutil.Big)(s.MaxTimestamp)
	enc.RevertingTxHashes = s.RevertingTxHashes
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *SendBundleParam) UnmarshalJSON(input []byte) error {
	type SendBundleParam struct {
		Transactions      *types.Transactions `json:"-"`
		RawTransactions   []hexutil.Bytes     `json:"txs"         gencodec:"required"`
		BlockNumber       *hexutil.Big        `json:"blockNumber" gencodec:"required"`
		MinTimestamp      *hexutil.Big        `json:"minTimestamp,omitempty"`
		MaxTimestamp      *hexutil.Big        `json:"maxTimestamp,omitempty"`
		RevertingTxHashes []common.Hash       `json:"revertingTxHashes,omitempty"`
	}
	var dec SendBundleParam
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Transactions != nil {
		s.Transactions = *dec.Transactions
	}
	if dec.RawTransactions == nil {
		return errors.New("missing required field 'txs' for SendBundleParam")
	}
	s.RawTransactions = make([][]byte, len(dec.RawTransactions))
	for k, v := range dec.RawTransactions {
		s.RawTransactions[k] = v
	}
	if dec.BlockNumber == nil {
		return errors.New("missing required field 'blockNumber' for SendBundleParam")
	}
	s.BlockNumber = (*big.Int)(dec.BlockNumber)
	if dec.MinTimestamp != nil {
		s.MinTimestamp = (*big.Int)(dec.MinTimestamp)
	}
	if dec.MaxTimestamp != nil {
		s.MaxTimestamp = (*big.Int)(dec.MaxTimestamp)
	}
	if dec.RevertingTxHashes != nil {
		s.RevertingTxHashes = dec.RevertingTxHashes
	}
	return nil
}
